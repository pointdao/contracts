{
  "name": "@typechain/ethers-v5",
  "description": "ðŸ”Œ TypeChain target for ethers-v5",
  "keywords": [
    "ethers",
    "ethersjs",
    "ethereum",
    "TypeChain",
    "TypeScript"
  ],
  "version": "10.0.0",
  "license": "MIT",
  "repository": "https://github.com/ethereum-ts/Typechain",
  "main": "./dist/index.js",
  "module": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "files": [
    "dist/**",
    "static/**",
    "README.md",
    "LICENSE"
  ],
  "peerDependencies": {
    "@ethersproject/abi": "^5.0.0",
    "@ethersproject/bytes": "^5.0.0",
    "@ethersproject/providers": "^5.0.0",
    "ethers": "^5.1.3",
    "typechain": "^8.0.0",
    "typescript": ">=4.3.0"
  },
  "devDependencies": {
    "@ethersproject/abi": "^5.0.0",
    "@ethersproject/bytes": "^5.0.0",
    "@ethersproject/providers": "^5.0.0",
    "@types/lodash": "^4.14.139",
    "ethers": "^5.1.3",
    "test-utils": "1.0.0",
    "typechain": "^8.0.0",
    "typescript": ">=4.3.0",
    "@types/proxyquire": "^1.3.28",
    "proxyquire": "^2.1.3"
  },
  "dependencies": {
    "lodash": "^4.17.15",
    "ts-essentials": "^7.0.1"
  },
  "scripts": {
    "start": "ts-node -T ./src/index.ts",
    "build": "tsc --build ./tsconfig.build.json --verbose",
    "format": "prettier --config ../../.prettierrc --ignore-path ../../.prettierignore --check \"./**/*.ts\" README.md",
    "format:fix": "prettier --config ../../.prettierrc --ignore-path ../../.prettierignore --write \"./**/*.ts\" README.md",
    "lint": "eslint --ext .ts src test",
    "lint:fix": "pnpm lint --fix",
    "typecheck": "tsc --noEmit --incremental false --composite false",
    "clean": "rm -rf dist && rm -f tsconfig.build.tsbuildinfo",
    "test": "mocha --config ../../.mocharc.js",
    "test:fix": "pnpm lint:fix && pnpm format:fix && pnpm test && pnpm typecheck"
  },
  "readme": "# Typechain target Ethers-v5\n\n<p align=\"center\">\n  <img src=\"https://github.com/Neufund/TypeChain/blob/d82f3cc644a11e22ca8e42505c16f035e2f2555d/docs/images/typechain-logo.png?raw=true\" width=\"300\" alt=\"TypeChain\">\n  <h3 align=\"center\">TypeChain target Ethers-v5</h3>\n  <p align=\"center\">ðŸ”Œ TypeScript bindings for Ethers 5.x.x smartcontracts</p>\n\n  <p align=\"center\">\n    <a href=\"https://github.com/ethereum-ts/TypeChain/actions\"><img alt=\"Build Status\" src=\"https://github.com/ethereum-ts/TypeChain/workflows/CI/badge.svg\"></a>\n    <img alt=\"Downloads\" src=\"https://img.shields.io/npm/dm/typechain.svg\">\n    <a href=\"https://github.com/prettier/prettier\"><img alt=\"Prettier\" src=\"https://img.shields.io/badge/code_style-prettier-ff69b4.svg\"></a>\n    <a href=\"/package.json\"><img alt=\"Software License\" src=\"https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square\"></a>\n  </p>\n\n  <p align=\"center\">\n    <a href=\"https://blog.neufund.org/introducing-typechain-typescript-bindings-for-ethereum-smart-contracts-839fc2becf22\">Medium post</a> | <a href=\"https://www.youtube.com/watch?v=9x6AkShGkwU\">DappCon Video</a>\n  </p>\n</p>\n\nThis package requires TypeScript >= 4.0. If you need support for earlier TS versions check out: 1.0 version of this\npackage.\n\n## [TypeChain readme](https://github.com/ethereum-ts/TypeChain)\n\n## Contract typings\n\nThe main files generated by this target are `<contract-name>.ts`. They declare typesafe interfaces for your contracts\non top of ethers `Contract` instances:\n\n- typed contract's methods, available both at `contract.someMethod(...)` and `contract.functions.someMethod(...)`\n- typed events in `contract.interface.events.AnEvent` and filters in `contract.filters.AnEvent`\n- typed method gas estimates in `contract.estimateGas.someMethod`\n- overrides for the event listener methods (`on`, `once`, etc) that return the same contract type.\n\nNote: these are just _type declarations_ to help you call the blockchain properly, so they're not available at runtime,\nand all of the contracts are still instances of the same `Contract` class.\n\n## Contract factories\n\nThis target also generates a concrete factory class for each contract, to help you deploy or connect to contract\ninstances. The factory classes are an extension of ethers' `ContractFactory`. They serve two main purposes:\n\n- wrap passing contract ABI and bytecode to the `ContractFactory` class, so you don't have to load and parse the JSON\n  manually\n- provide a correctly typed interface to `ContractFactory` (since it returns plain `Contract` instances).\n\nAbstract contracts or solidity interfaces are handled a bit different, because they have no bytecode. For those, a\nsimplified factory is generated that doesn't extends `ContractFactory`, and only includes the static `connect` method,\nso you can easily connect to a deployed instance without having to pass the ABI manually.\n\n## Basic example\n\nSuppose you have an `Erc20Token.sol` solidity interface and a `DummyToken.sol` contract implementing it.\n\n```typescript\nimport { BigNumber } from 'ethers';\nimport { Wallet } from 'ethers';\n\nimport { DummyTokenFactory } from 'typechain-out-dir/DummyTokenFactory';\nimport { DummyToken } from 'typechain-out-dir/DummyToken';\nimport { Erc20TokenFactory } from 'typechain-out-dir/Erc20TokenFactory';\n\nconst provider = getYourProvider(...);\n\n// use the concrete contract factory if you need to operate on the bytecode (ie. deploy)\nasync function deployTestToken(ownerPK: string): Promise<DummyToken> {\n    const owner = new Wallet(ownerPK, provider);\n    return new DummyTokenFactory(owner).deploy();\n}\n\n// to call existing contracts, a factory for both the concrete contract and for the interface\n// can be used since the ABI is the same\nasync function getTokenBalance(walletAddress: string, tokenAddress: string): Promise<BigNumber> {\n    const token = Erc20TokenFactory.connect(tokenAddress, provider);\n    return token.balanceOf(walletAddress);\n}\n```\n"
}