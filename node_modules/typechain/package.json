{
  "name": "typechain",
  "description": "🔌 TypeScript bindings for Ethereum smartcontracts",
  "keywords": [
    "ethereum",
    "TypeScript",
    "bindings",
    "smartcontract",
    "blockchain"
  ],
  "version": "8.0.0",
  "license": "MIT",
  "repository": "https://github.com/ethereum-ts/Typechain",
  "main": "./dist/index.js",
  "module": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "bin": "./dist/cli/cli.js",
  "files": [
    "dist/**/*"
  ],
  "dependencies": {
    "@types/prettier": "^2.1.1",
    "debug": "^4.3.1",
    "fs-extra": "^7.0.0",
    "glob": "7.1.7",
    "js-sha3": "^0.8.0",
    "lodash": "^4.17.15",
    "mkdirp": "^1.0.4",
    "ts-command-line-args": "^2.2.0",
    "prettier": "^2.3.1",
    "ts-essentials": "^7.0.1"
  },
  "devDependencies": {
    "@types/bluebird": "^3.5.18",
    "@types/command-line-args": "^4.0.2",
    "@types/debug": "^4.1.5",
    "@types/fs-extra": "^5.0.4",
    "@types/glob": "^5.0.35",
    "@types/lodash": "^4.14.139",
    "@types/mkdirp": "^1.0.1",
    "@types/node": "^14",
    "bluebird": "^3.5.1",
    "coveralls": "^3.0.2"
  },
  "peerDependencies": {
    "typescript": ">=4.3.0"
  },
  "scripts": {
    "start": "ts-node -T ./src/index.ts",
    "format": "prettier --config ../../.prettierrc --ignore-path ../../.prettierignore --check \"./**/*.ts\"",
    "format:fix": "prettier --config ../../.prettierrc --ignore-path ../../.prettierignore --write \"./**/*.ts\"",
    "lint": "eslint --ext .ts src test",
    "lint:fix": "pnpm lint --fix",
    "typecheck": "tsc --noEmit --incremental false --composite false",
    "clean": "rm -rf dist && rm -f tsconfig.build.tsbuildinfo",
    "post-build": "ts-node scripts/post-build",
    "test": "mocha --config ../../.mocharc.js",
    "test:fix": "pnpm lint:fix && pnpm format:fix && pnpm test && pnpm typecheck"
  },
  "readme": "<p align=\"center\">\n  <img src=\"/docs/images/typechain-logo.png\" width=\"300\" alt=\"TypeChain\">\n  <p align=\"center\">🔌 TypeScript bindings for Ethereum smart contracts</p>\n\n  <p align=\"center\">\n    <a href=\"https://github.com/ethereum-ts/TypeChain/actions\"><img alt=\"Build Status\" src=\"https://github.com/ethereum-ts/TypeChain/workflows/CI/badge.svg\"></a>\n    <img alt=\"Downloads\" src=\"https://img.shields.io/npm/dm/typechain.svg\">\n    <a href=\"/package.json\"><img alt=\"Software License\" src=\"https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square\"></a>\n    <a href=\"https://discord.gg/wQDkeDgzgv\"><img alt=\"Join our discord!\" src=\"https://img.shields.io/discord/895381864922091630.svg?color=7289da&label=deth&logo=discord&style=flat-square\"></a>\n  </p>\n\n  <p align=\"center\">\n    <strong>💸 Enjoy using TypeChain? Consider funding development via <a href=\"https://gitcoin.co/grants/4038/deth-typechain\">GitCoin</a> 💸</strong>\n  </p>\n\n  <p align=\"center\">\n    <i>Used by the best:</i> <br/>\n    <img src=\"https://raw.githubusercontent.com/ethereum-ts/TypeChain/master/docs/images/maker-logo.png\" height=\"110\" alt=\"Maker DAO\" />\n    <a href=\"https://github.com/Uniswap/uniswap-v3-core/blob/main/hardhat.config.ts#L1\"><img src=\"https://raw.githubusercontent.com/ethereum-ts/TypeChain/master/docs/images/uniswap-logo.png\" height=\"90\" alt=\"Uniswap\" /></a>\n    <a href=\"https://github.com/aave/protocol-v2/blob/master/hardhat.config.ts#L16\"><img src=\"https://raw.githubusercontent.com/ethereum-ts/TypeChain/master/docs/images/aave-logo.png\" height=\"60\" alt=\"AAVE\" /></a>\n    <br/>\n    <a href=\"https://github.com/ethereum-optimism/optimism/blob/master/packages/contracts/hardhat.config.ts#L14\"><img src=\"https://raw.githubusercontent.com/ethereum-ts/TypeChain/master/docs/images/optimism-logo.png\" height=\"90\" alt=\"Optimism\" /></a>\n    <a href=\"https://github.com/matter-labs/zksync/blob/9687049af1efbd14d8e47d97ebea643e1516da9d/contracts/hardhat.config.ts#L4\"><img src=\"https://raw.githubusercontent.com/ethereum-ts/TypeChain/master/docs/images/zksync-logo.png\" height=\"100\" alt=\"zkSync\" /></a>\n    <a href=\"https://github.com/KyberNetwork/dao_sc/blob/master/hardhat.config.ts#L8\"><img src=\"https://raw.githubusercontent.com/ethereum-ts/TypeChain/master/docs/images/kyber-logo.png\" height=\"100\" alt=\"Kyber\" /></a>\n    <a href=\"https://github.com/OffchainLabs/arbitrum/blob/133ac08dbf423ce7ca79343260869e46bf02a543/packages/arb-bridge-eth/package.json#L39\"><img src=\"https://raw.githubusercontent.com/ethereum-ts/TypeChain/master/docs/images/arbitrum-logo.png\" height=\"100\" alt=\"Arbitrum\" /></a>\n  </p>\n</p>\n\n## Features ⚡\n\n- static typing - you will never call not existing method again\n- IDE support - works with any IDE supporting Typescript\n- extendible - work with many different tools: `ethers.js`, `hardhat`, `truffle`, `Web3.js` or you can create your own\n  target\n- frictionless - works with simple, JSON ABI files as well as with Truffle/Hardhat artifacts\n\n## Installation\n\n```bash\nnpm install --save-dev typechain\n```\n\nYou will also need to install a desired target for example `@typechain/ethers-v5`. [Learn more about targets](#targets-)\n\n_Take note, that code generated by TypeChain requires TypeScript version 4.3 or newer._\n\n## Packages 📦\n\n| Package                                                                                                                                     | Version                                                                                                               | Description                                  | Examples                                                                                                             |\n| ------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- | -------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- |\n| [`typechain`](/packages/typechain)                                                                                                          | [![npm](https://img.shields.io/npm/v/typechain.svg)](https://www.npmjs.com/package/typechain)                         | Core package                                 | -                                                                                                                    |\n| [`@typechain/ethers-v5`](/packages/target-ethers-v5)                                                                                        | [![npm](https://img.shields.io/npm/v/@typechain/ethers-v5.svg)](https://www.npmjs.com/package/@typechain/ethers-v5)   | Ethers ver 5 support (⚠️ requires TS 4.0 >=) | [example](./examples/ethers-v5)                                                                                      |\n| [`@typechain/truffle-v5`](/packages/target-truffle-v5)                                                                                      | [![npm](https://img.shields.io/npm/v/@typechain/truffle-v5.svg)](https://www.npmjs.com/package/@typechain/truffle-v5) | Truffle ver 5 support                        | [example](./examples/truffle-v5)                                                                                     |\n| [`@typechain/web3-v1`](/packages/target-web3-v1)                                                                                            | [![npm](https://img.shields.io/npm/v/@typechain/web3-v1.svg)](https://www.npmjs.com/package/@typechain/web3-v1)       | Web3 ver 1 support                           | [example](./examples/web3-v1)                                                                                        |\n| [`@typechain/hardhat`](/packages/hardhat)                                                                                                   | [![npm](https://img.shields.io/npm/v/@typechain/hardhat.svg)](https://www.npmjs.com/package/@typechain/hardhat)       | Hardhat plugin                               | [example-ethers](./examples/hardhat) [example-truffle](./examples/hardhat-truffle)                                   |\n| [`@typechain/truffle-v4`](https://github.com/dethcrypto/TypeChain/tree/fb96e1cf06c8c4c17cd79a1743362bd3d34eab76/packages/target-truffle-v4) | [![npm](https://img.shields.io/npm/v/@typechain/truffle-v4.svg)](https://www.npmjs.com/package/@typechain/truffle-v4) | Truffle ver 4 support **(deprecated)**       | [example](https://github.com/dethcrypto/TypeChain/tree/fb96e1cf06c8c4c17cd79a1743362bd3d34eab76/examples/truffle-v4) |\n| [`@typechain/ethers-v4`](/packages/target-ethers-v4)                                                                                        | [![npm](https://img.shields.io/npm/v/@typechain/ethers-v4.svg)](https://www.npmjs.com/package/@typechain/ethers-v4)   | Ethers ver 4 support **(deprecated)**        | [example](https://github.com/dethcrypto/TypeChain/tree/db551b5c5f70e86f3ca342551e9e0369d099cfa2/examples/ethers-v4)  |\n\n### eth-sdk\n\nTypeChain generates only TypeScript typings (`d.ts`) files, if you're looking for \"opionated\", \"batteries included\"\nsolution check out our new project: [eth-sdk](https://github.com/dethcrypto/eth-sdk). It generates typesafe, ready to\nuse ethers.js wrappers and uses etherscan/sourcify to automatically get ABIs based only on smart contract addresses.\nUnder the hood, `eth-sdk` relies on `TypeChain`.\n\n## Usage\n\n### CLI\n\n_Note: If you use hardhat just use\n[hardhat plugin](https://github.com/ethereum-ts/TypeChain/tree/master/packages/hardhat)._\n\n```\ntypechain --target=(ethers-v5|truffle-v4|truffle-v5|web3-v1|path-to-custom-target) [glob]\n```\n\n- `glob` - pattern that will be used to find ABIs, remember about adding quotes: `typechain \"**/*.json\"`, examples:\n  `./abis/**/*.abi`, `./abis/?(Oasis.abi|OasisHelper.abi)`.\n- `--target` - ethers-v5, truffle-v4, truffle-v5, web3-v1 or path to your custom target. Typechain will try to load\n  package named: `@typechain/${target}`, so make sure that desired package is installed.\n- `--out-dir` (optional) - put all generated files to a specific dir.\n- `--always-generate-overloads` (optional) - some targets won't generate unnecessary types for overloaded functions by\n  default, this option forces to always generate them\n- `--discriminate-types` (optional) - ethers-v5 will add an artificial field `contractName` that helps discriminate\n  between contracts\n\nTypeChain always will rewrite existing files. You should not commit them. Read more in FAQ section.\n\nExample:\n\n```\ntypechain --target ethers-v5 --out-dir app/contracts './node_modules/neufund-contracts/build/contracts/*.json'\n```\n\n## Videos\n\n- [Devcon5 Video (2019)](https://www.youtube.com/watch?v=Ho4dGNKVkTE)\n\n## Getting started 📚\n\n### Motivation\n\nInteracting with blockchain in Javascript is a pain. Developers need to remember not only a name of a given smart\ncontract method or event but also it's full signature. This wastes time and might introduce bugs that will be triggered\nonly in runtime. TypeChain solves these problems (as long as you use TypeScript).\n\n### How does it work?\n\nTypeChain is a code generator - provide ABI file and name of your blockchain access library (ethers/truffle/web3.js) and\nyou will get TypeScript typings compatible with a given library.\n\n### Step by step guide\n\nInstall TypeChain with `npm install --save-dev typechain` and install desired target.\n\nRun `typechain --target=your_target` (you might need to make sure that it's available in your path if you installed it\nonly locally), it will automatically find all `.abi` files in your project and generate Typescript classes based on\nthem. You can specify your glob pattern: `typechain --target=your_target \"**/*.abi.json\"`. `node_modules` are always\nignored. We recommend git ignoring these generated files and making typechain part of your build process.\n\nThat's it! Now, you can simply import typings, check out our examples for more details.\n\n## Targets 🎯\n\n### Ethers.js v5\n\nUse `ethers-v5` target to generate wrappers for [ethers.js](https://github.com/ethers-io/ethers.js/) lib. To make it\nwork great with Hardhat, use [Hardhat plugin](https://github.com/ethereum-ts/TypeChain/tree/master/packages/hardhat).\n\nIf you're using Ethers.js v4, you can find legacy `@typechain/ethers-v4` target on\n[npm](https://www.npmjs.com/package/@typechain/ethers-v4) and commit\n[`db551b5`](https://github.com/dethcrypto/TypeChain/tree/db551b5c5f70e86f3ca342551e9e0369d099cfa2).\n\n### Truffle v5\n\nTruffle target is great when you use truffle contracts already. Check out\n[truffle-typechain-example](https://github.com/ethereum-ts/truffle-typechain-example) for more details. It require\ninstalling [typings](https://www.npmjs.com/package/truffle-typings) for truffle library itself.\n\nNow you can simply use your contracts as you did before and get full type safety, yay!\n\n### Web3 v1\n\nGenerates typings for contracts compatible with latest stable Web3.js version. Typings for library itself are now part\nof the `Web3 1.0.0` library so nothing additional is needed. For now it needs explicit cast as shown\n[here](https://github.com/krzkaczor/TypeChain/pull/88/files#diff-540a9b8840419be93ddb8d4b53325637R8), this will be fixed\nafter improving official typings.\n\n### NatSpec support\n\nIf you provide solidity artifacts rather than plain ABIs as an input, TypeChain can generate NatSpec comments directly\nto your typings which enables simple access to docs while coding.\n\n### Your own target\n\nThis might be useful when you're creating a library for users of your smartcontract and you don't want to lock yourself\ninto any API provided by Web3 access providing library. You can generate basically any code (even for different\nlanguages than TypeScript!) that based on smartcontract's ABI.\n\n## FAQ 🤔\n\n### Q: Should I commit generated files to my repository?\n\nA: _NO_ — we believe that no generated files should go to git repository. You should git ignore them and make\n`typechain` run automatically for example in post install hook in package.json:\n\n```\n\"postinstall\":\"typechain\"\n```\n\nWhen you update ABI, just regenerate files with TypeChain and Typescript compiler will find any breaking changes for\nyou.\n\n### Q: How do I customize generated code?\n\nA: You can create your own target and generate basically any code.\n\n### Q: Generated files won't match current codestyle of my project :(\n\nA: We will automatically format generated classes with `prettier` to match your coding preferences (just make sure to\nuse `.prettierrc` file).\n\nFurthermore, TypeChain will silent `eslint` and `tslint` errors for generated files.\n\n### Usage as API\n\n```typescript\nimport { runTypeChain, glob } from 'typechain'\n\nasync function main() {\n  const cwd = process.cwd()\n  // find all files matching the glob\n  const allFiles = glob(cwd, [`${config.paths.artifacts}/!(build-info)/**/+([a-zA-Z0-9_]).json`])\n\n  const result = await runTypeChain({\n    cwd,\n    filesToProcess: allFiles,\n    allFiles,\n    outDir: 'out directory',\n    target: 'target name',\n  })\n}\n\nmain().catch(console.error)\n```\n\nIf you don't care about incremental generation just specify the same set of files for `filesToProcess` and `allFiles`.\nFor incremental generation example read the source code of\n[hardhat plugin](https://github.com/ethereum-ts/TypeChain/blob/master/packages/hardhat/src/index.ts).\n\n# Contributing\n\nCheck out our [contributing guidelines](./CONTRIBUTING.md)\n\n# Licence\n\nKris Kaczor (krzkaczor) MIT | [Github](https://github.com/krzkaczor) | [Twitter](https://twitter.com/krzkaczor)\n"
}